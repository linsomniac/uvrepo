name: Build & Publish Debian Packages

on:
  schedule:
    - cron: "54 7 * * *"
  push:
    branches:
      - main

jobs:
  build-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: Main

    strategy:
      matrix:
        include:
          - target: "x86_64-unknown-linux-gnu"
            arch: "amd64"
          - target: "s390x-unknown-linux-gnu"
            arch: "s390x"
          - target: "aarch64-unknown-linux-gnu"
            arch: "arm64"

    env:
      DISTRIBUTION: any
      COMPONENT: main
      RELEASE: 1
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      KEY_ID: ${{ vars.KEY_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro dpkg-dev curl jq gnupg debsigs

      - name: Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "$KEY_ID:6:" | gpg --import-ownertrust

      - name: Get latest UV version
        id: get-version
        run: |
          TAG=$(curl -s https://api.github.com/repos/astral-sh/uv/releases/latest | jq -r '.tag_name')
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download and extract UV binary
        run: |
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/astral-sh/uv/releases/latest |
            jq -r '.assets[] | select(.name | contains("${{ matrix.target }}") and endswith(".tar.gz")) | .browser_download_url')
          curl -L "$DOWNLOAD_URL" -o uv.tar.gz
          mkdir dl
          tar xf uv.tar.gz -C dl

      - name: Build Debian package
        run: |
          PKG_NAME="uv_${{ steps.uv_version.outputs.version }}_${{ matrix.arch }}.deb"

          mkdir -p pkg/DEBIAN
          cat <<EOF > pkg/DEBIAN/control
          Package: uv
          Version: ${{ steps.uv_version.outputs.version }}-${RELEASE}
          Section: utils
          Priority: optional
          Architecture: ${{ matrix.target }}
          Maintainer: GitHub Actions <actions@github.com>
          Description: An extremely fast Python package and project manager.
          EOF
          cat pkg/DEBIAN/control
          echo "Version: ${{ steps.uv_version.outputs.version }}-${RELEASE}"
          cat $GITHUB_OUTPUT

          mkdir -p pkg/usr/bin
          fakeroot bash -c "install -o root -g root -m 755 dl/*/uv* pkg/usr/bin ; dpkg-deb --build pkg $PKG_NAME"

      - name: Sign Debian package
        run: |
          debsigs --sign=origin --default-key="$KEY_ID" uv*.deb

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages
          path: "*.deb"

  publish-repo:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: build-packages

    env:
      DISTRIBUTION: stable
      COMPONENT: main
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      KEY_ID: ${{ vars.KEY_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro

      - name: Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "$KEY_ID:6:" | gpg --import-ownertrust

      - name: Download all deb packages
        uses: actions/download-artifact@v4
        with:
          name: deb-packages
          path: ./packages

      - name: Create repository
        run: |
          mkdir -p repo/conf
          cat <<EOF > repo/conf/distributions
          Origin: GitHub
          Suite: stable
          Codename: $DISTRIBUTION
          Components: $COMPONENT
          Architectures: amd64 s390x arm64
          SignWith: $KEY_ID
          EOF

          reprepro -b repo includedeb $DISTRIBUTION packages/*.deb

      - name: Deploy APT repository to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
